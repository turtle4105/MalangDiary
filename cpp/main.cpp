#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <iomanip>
#include "HttpClient.hpp"
#include <filesystem>
#include <windows.h>  // UTF-8 변환용 API (Windows 전용)

// ================== 설정 구역 ==================

// 서버 URL 설정
const std::string SERVER_URL = "http://localhost:8000/transcribe";

// ==============================================

// URL 인코딩 함수 (한글 이름 처리용)
std::string url_encode(const std::string& value) {
    std::ostringstream escaped;
    escaped.fill('0');
    escaped << std::hex;

    for (std::string::const_iterator i = value.begin(), n = value.end(); i != n; ++i) {
        std::string::value_type c = (*i);

        // ASCII 알파벳, 숫자, 일부 특수문자는 그대로 유지
        if (isalnum(c) || c == '-' || c == '_' || c == '.' || c == '~') {
            escaped << c;
            continue;
        }

        // 나머지는 퍼센트 인코딩
        escaped << std::uppercase;
        escaped << '%' << std::setw(2) << int((unsigned char)c);
        escaped << std::nouppercase;
    }

    return escaped.str();
}

// 음성 일기 생성 함수
std::string generateVoiceDiary(const std::string& childName,
    const std::string& audioFilePath,
    const std::string& embedding_json) {
    std::cout << "=== 음성 일기 생성 클라이언트 ===" << std::endl;
    std::cout << "설정된 아이 이름: " << childName << std::endl;
    std::cout << "오디오 파일: " << audioFilePath << std::endl;
    std::cout << "임베딩 파일: " << embedding_json << std::endl;
    std::cout << "서버 URL: " << SERVER_URL << std::endl;

    // [추가] childName을 UTF-8 바이트로 변환 (Windows CP949 → UTF-8)
    int len = MultiByteToWideChar(CP_ACP, 0, childName.c_str(), -1, NULL, 0);  // CP_ACP: 시스템 기본 (CP949)
    wchar_t* wstr = new wchar_t[len];
    MultiByteToWideChar(CP_ACP, 0, childName.c_str(), -1, wstr, len);

    int utf8_len = WideCharToMultiByte(CP_UTF8, 0, wstr, -1, NULL, 0, NULL, NULL);
    char* utf8_str = new char[utf8_len];
    WideCharToMultiByte(CP_UTF8, 0, wstr, -1, utf8_str, utf8_len, NULL, NULL);

    std::string utf8_childName(utf8_str);

    delete[] wstr;
    delete[] utf8_str;

    // 변환된 UTF-8 문자열로 url_encode
    std::string encodedChildName = url_encode(utf8_childName);
    std::cout << "인코딩된 아이 이름 (UTF-8 기반): " << encodedChildName << std::endl;
    std::cout << "아이 이름 '" << childName << "' (인코딩: " << encodedChildName << ")로 음성 분석을 시작합니다..." << std::endl;

    HttpClient client;
    std::string response = client.sendMultipleFiles(encodedChildName, audioFilePath, embedding_json, SERVER_URL);  // 인코딩된 이름 전달

    return response;
}

int main() {
    // 기본값으로 테스트
    std::string childName = "전인우";
    std::string audioFilePath = "../../data/inwoo_diary.wav";

    std::string embedding_json = "[0.10536525398492813,0.0,0.0,0.0,0.0,0.0,0.0,0.14744506776332855,0.004937579855322838,0.17479261755943298,0.06373615562915802,0.08198851346969604,0.03966839984059334,0.025140749290585518,0.0,0.0,0.11556734889745712,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.018912233412265778,0.0,0.0,0.050996165722608566,0.0,0.08332962542772293,0.06788799166679382,0.11879827082157135,0.013113993220031261,0.0532664991915226,0.05336317420005798,0.0,0.0,0.0,0.09670987725257874,0.010388411581516266,0.09378775954246521,0.06565140932798386,0.0,0.09055177867412567,0.0,0.1321539431810379,0.0,0.0069200024008750916,0.0,0.0,0.0,0.0,0.015766184777021408,0.0,0.008977294899523258,0.0,0.11799708753824234,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0767320841550827,0.0,0.0,0.0,0.0,0.06016342714428902,0.0,0.06941312551498413,0.0,0.0,0.0,0.056130532175302505,0.0,0.0,0.07815210521221161,0.0,0.0,0.015127808786928654,0.12008466571569443,0.13539718091487885,0.12517991662025452,0.06313008815050125,0.0,0.09056569635868073,0.0,0.0,0.0,0.0,0.053303103893995285,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.010747555643320084,0.0,0.09393686056137085,0.0,0.05816495046019554,0.0,0.011810600757598877,0.08441205322742462,0.0,0.02782626636326313,0.04225461557507515,0.046907346695661545,0.03502822667360306,0.0,0.048499107360839844,0.0,0.052725281566381454,0.0,0.0,0.056104060262441635,0.17207135260105133,0.059082791209220886,0.0,0.09805073589086533,0.0,0.1121729239821434,0.027458028867840767,0.0,0.0,0.0,0.0,0.12860001623630524,0.0013112802989780903,0.0,0.07360716909170151,0.0,0.12624073028564453,0.0,0.0,0.0,0.0,0.0,0.09217185527086258,0.0,0.0,0.0,0.09635742753744125,0.0,0.15457244217395782,0.08135044574737549,0.0,0.0,0.07077725231647491,0.05613444000482559,0.0,0.029485011473298073,0.0,0.14895856380462646,0.14272215962409973,0.0,0.0,0.004072296433150768,0.0486181378364563,0.028519731014966965,0.06104172766208649,0.05260615423321724,0.08927661925554276,0.08164189010858536,0.0,0.12847894430160522,0.03976507857441902,0.03530411794781685,0.0,0.005394948646426201,0.025604968890547752,0.0974198505282402,0.13515551388263702,0.03497400879859924,0.002324869157746434,0.0,0.0,0.07337424159049988,0.0,0.0,0.0,0.05793168023228645,0.05520328879356384,0.05291927978396416,0.06275950372219086,0.007361725438386202,0.0766606256365776,0.14770032465457916,0.0,0.11581330746412277,0.0,0.06596610695123672,0.09065289050340652,0.06525104492902756,0.03704148530960083,0.059521496295928955,0.0,0.0,0.0,0.0,0.177495539188385,0.071068674325943,0.0,0.0,0.0,0.0,0.0859004482626915,0.05506306514143944,0.0,0.15635564923286438,0.0,0.05706821009516716,0.1485048234462738,0.0013909117551520467,0.04134749621152878,0.0,0.0,0.0,0.0,0.04491094872355461,0.0,0.18181727826595306,0.0,0.0,0.0807722955942154,0.03402213007211685,0.0,0.0,0.0,0.1514233946800232,0.007192510180175304,0.04689515382051468,0.08952917158603668,0.07451057434082031,0.15092289447784424,0.025175033137202263,0.0,0.05732634291052818,0.273547500371933,0.10064282268285751,0.14913064241409302,0.06763939559459686,0.1062425822019577,0.048018503934144974,0.0,0.0,0.10734295099973679,0.0,0.0,0.0]";

    std::string response = generateVoiceDiary(childName, audioFilePath, embedding_json);

    // 1) 콘솔 출력
    std::cout << "\n=== 서버 응답 ===" << std::endl;
    std::cout << response << std::endl;

    // 2) 파일로 저장
    std::ofstream outFile("result.json");
    if (outFile.is_open()) {
        outFile << response;
        outFile.close();
        std::cout << "\n=== 결과 저장 완료 ===" << std::endl;
        std::cout << "결과가 result.json 파일에 저장되었습니다." << std::endl;
    }
    else {
        std::cerr << "ERROR: result.json 파일 저장에 실패했습니다." << std::endl;
    }

    return 0;
}