#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <iomanip>
#include "HttpClient.hpp"
#include <filesystem>
#include <windows.h>  // UTF-8 변환용 API (Windows 전용)

// ================== 설정 구역 ==================

// 서버 URL 설정
const std::string SERVER_URL = "http://localhost:8000/transcribe";

// ==============================================

// URL 인코딩 함수 (한글 이름 처리용)
std::string url_encode(const std::string& value) {
    std::ostringstream escaped;
    escaped.fill('0');
    escaped << std::hex;

    for (std::string::const_iterator i = value.begin(), n = value.end(); i != n; ++i) {
        std::string::value_type c = (*i);

        // ASCII 알파벳, 숫자, 일부 특수문자는 그대로 유지
        if (isalnum(c) || c == '-' || c == '_' || c == '.' || c == '~') {
            escaped << c;
            continue;
        }

        // 나머지는 퍼센트 인코딩
        escaped << std::uppercase;
        escaped << '%' << std::setw(2) << int((unsigned char)c);
        escaped << std::nouppercase;
    }

    return escaped.str();
}

// 음성 일기 생성 함수
std::string generateVoiceDiary(const std::string& childName,
    const std::string& audioFilePath,
    const std::string& embedding_json) {
    std::cout << "=== 음성 일기 생성 클라이언트 ===" << std::endl;
    std::cout << "설정된 아이 이름: " << childName << std::endl;
    std::cout << "오디오 파일: " << audioFilePath << std::endl;
    std::cout << "임베딩 파일: " << embedding_json << std::endl;
    std::cout << "서버 URL: " << SERVER_URL << std::endl;

    // [추가] childName을 UTF-8 바이트로 변환 (Windows CP949 → UTF-8)
    int len = MultiByteToWideChar(CP_ACP, 0, childName.c_str(), -1, NULL, 0);  // CP_ACP: 시스템 기본 (CP949)
    wchar_t* wstr = new wchar_t[len];
    MultiByteToWideChar(CP_ACP, 0, childName.c_str(), -1, wstr, len);

    int utf8_len = WideCharToMultiByte(CP_UTF8, 0, wstr, -1, NULL, 0, NULL, NULL);
    char* utf8_str = new char[utf8_len];
    WideCharToMultiByte(CP_UTF8, 0, wstr, -1, utf8_str, utf8_len, NULL, NULL);

    std::string utf8_childName(utf8_str);

    delete[] wstr;
    delete[] utf8_str;

    // 변환된 UTF-8 문자열로 url_encode
    std::string encodedChildName = url_encode(utf8_childName);
    std::cout << "인코딩된 아이 이름 (UTF-8 기반): " << encodedChildName << std::endl;
    std::cout << "아이 이름 '" << childName << "' (인코딩: " << encodedChildName << ")로 음성 분석을 시작합니다..." << std::endl;

    HttpClient client;
    std::string response = client.sendMultipleFiles(encodedChildName, audioFilePath, embedding_json, SERVER_URL);  // 인코딩된 이름 전달

    return response;
}

int main() {
    // 기본값으로 테스트
    std::string childName = "전준우";
    std::string audioFilePath = "../../data/junwoo_diary.wav";

    std::string embedding_json = "[0.040228188037872314,0.0,0.0,0.0,0.0,0.012750761583447456,0.0,0.019212137907743454,0.0,0.07155187427997589,0.09364116936922073,0.11470083892345428,0.19101539254188538,0.13009166717529297,0.0,0.0,0.10443221777677536,0.12801948189735413,0.0,0.0,0.012960003688931465,0.046276502311229706,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.09989028424024582,0.017414472997188568,0.0,0.026920998468995094,0.015645643696188927,0.000282577850157395,0.09820554405450821,0.0,0.0,0.0,0.058772049844264984,0.0,0.06262730062007904,0.007980454713106155,0.0,0.0,0.0,0.07455011457204819,0.0040670703165233135,0.05517986789345741,0.0,0.0,0.0,0.0,0.0027317763306200504,0.0,0.166499525308609,0.023830596357584,0.13529852032661438,0.12168050557374954,0.0,0.0,0.015366876497864723,0.0,0.0,0.0,0.0,0.07456568628549576,0.0,0.0,0.0,0.017761321738362312,0.0,0.13836951553821564,0.0,0.0,0.0,0.0,0.07587958127260208,0.07732731103897095,0.11955946683883667,0.0,0.0,0.1071561723947525,0.0,0.0,0.0,0.016298823058605194,0.0,0.0,0.0,0.0,0.0,0.02235255017876625,0.020755330100655556,0.0,0.0,0.0,0.0,0.0,0.12975415587425232,0.0,0.0,0.0,0.08575116097927094,0.028675008565187454,0.0331764779984951,0.0,0.09921056032180786,0.027759991586208344,0.0,0.0,0.05616583302617073,0.09542104601860046,0.0400080531835556,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.08202916383743286,0.08011355996131897,0.0,0.0456404946744442,0.09164335578680038,0.14490191638469696,0.18959484994411469,0.0,0.16852915287017822,0.0,0.0,0.08885600417852402,0.06653518974781036,0.0,0.036520324647426605,0.0,0.0,0.03876716271042824,0.0,0.0,0.05928734317421913,0.0,0.09327463805675507,0.0,0.06524821370840073,0.0,0.08187959343194962,0.0,0.058160200715065,0.19119462370872498,0.0,0.0,0.13344606757164001,0.014646386727690697,0.0,0.03922583907842636,0.04488062858581543,0.10738293826580048,0.20562395453453064,0.0,0.09620273858308792,0.061216745525598526,0.15333294868469238,0.0,0.0644138976931572,0.09761422872543335,0.12779611349105835,0.0219242163002491,0.0,0.0,0.03992931917309761,0.0,0.0,0.020532727241516113,0.03439463675022125,0.1702876091003418,0.10696078836917877,0.0,0.02452264167368412,0.0,0.011751345358788967,0.009801430627703667,0.0,0.0,0.0,0.0,0.0,0.03226298466324806,0.0,0.0,0.0659337043762207,0.019724801182746887,0.0,0.06444267928600311,0.0,0.065764419734478,0.1318700909614563,0.12269020825624466,0.09712810814380646,0.11205478012561798,0.07843931764364243,0.0,0.0,0.0,0.058531563729047775,0.039670392870903015,0.0,0.0,0.0,0.06304226070642471,0.14887426793575287,0.08055133372545242,0.0,0.058898795396089554,0.0,0.036164797842502594,0.1400950402021408,0.0,0.10108249634504318,0.0,0.0,0.0,0.00800594687461853,0.08692742139101028,0.11097930371761322,0.1314059942960739,0.0,0.0,0.050862867385149,0.0,0.0,0.0,0.0,0.04081610590219498,0.058070793747901917,0.02468203380703926,0.0,0.10488761216402054,0.14670789241790771,0.0,0.0,0.18377326428890228,0.13748259842395782,0.02274215780198574,0.10752949118614197,0.04677847400307655,0.0,0.03633052110671997,0.0,0.0,0.08630137890577316,0.0,0.0,0.0]";

    std::string response = generateVoiceDiary(childName, audioFilePath, embedding_json);

    // 1) 콘솔 출력
    std::cout << "\n=== 서버 응답 ===" << std::endl;
    std::cout << response << std::endl;

    // 2) 파일로 저장
    std::ofstream outFile("result.json");
    if (outFile.is_open()) {
        outFile << response;
        outFile.close();
        std::cout << "\n=== 결과 저장 완료 ===" << std::endl;
        std::cout << "결과가 result.json 파일에 저장되었습니다." << std::endl;
    }
    else {
        std::cerr << "ERROR: result.json 파일 저장에 실패했습니다." << std::endl;
    }

    return 0;
}